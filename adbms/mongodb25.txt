MongoDB shell version: 3.2.22
connecting to: test
> use Vehicle;
switched to db Vehicle
> db.VehicleDetails.find().pretty();
{
        "_id" : ObjectId("66865e617ea1602d1514450d"),
        "regno" : "brg446",
        "make" : "ford",
        "model" : "metror",
        "year" : 2009,
        "colour" : "white"
}
{
        "_id" : ObjectId("66865e617ea1602d1514450e"),
        "regno" : "vrg665",
        "make" : "bmw",
        "model" : "coupe",
        "year" : 2008,
        "colour" : "blue"
}
{
        "_id" : ObjectId("66865e617ea1602d1514450f"),
        "regno" : "nmt778",
        "make" : "madz",
        "model" : "delivum",
        "year" : 2010,
        "colour" : "green"
}
{
        "_id" : ObjectId("66865e617ea1602d15144510"),
        "regno" : "cct556",
        "make" : "toyota",
        "model" : "hiluxe",
        "year" : 2006,
        "colour" : "blue"
}
{
        "_id" : ObjectId("66865e617ea1602d15144511"),
        "regno" : "fgf223",
        "make" : "metumbish",
        "model" : "megna",
        "year" : 2007,
        "colour" : "purple"
}
> db.VehicleDetails.uppdateMany({},{$set:{Enno:null}})
2024-07-04T14:13:02.767+0530 E QUERY    [thread1] TypeError: db.VehicleDetails.uppdateMany is not a function :
@(shell):1:1

> db.VehicleDetails.updateMany({},{set:{Enno:null}})
2024-07-04T14:13:39.440+0530 E QUERY    [thread1] Error: the update operation document must contain atomic operators :
DBCollection.prototype.updateMany@src/mongo/shell/crud_api.js:568:1
@(shell):1:1

> db.VehicleDetails.updateMany({},{set: { enno:null }});
2024-07-04T14:15:18.791+0530 E QUERY    [thread1] Error: the update operation document must contain atomic operators :
DBCollection.prototype.updateMany@src/mongo/shell/crud_api.js:568:1
@(shell):1:1

> db.VehicleDetails.updateMany({},{$set:{ enno:null}});
{ "acknowledged" : true, "matchedCount" : 5, "modifiedCount" : 5 }
> db.VehicleDetails.find().pretty();
{
        "_id" : ObjectId("66865e617ea1602d1514450d"),
        "regno" : "brg446",
        "make" : "ford",
        "model" : "metror",
        "year" : 2009,
        "colour" : "white",
        "enno" : null
}
{
        "_id" : ObjectId("66865e617ea1602d1514450e"),
        "regno" : "vrg665",
        "make" : "bmw",
        "model" : "coupe",
        "year" : 2008,
        "colour" : "blue",
        "enno" : null
}
{
        "_id" : ObjectId("66865e617ea1602d1514450f"),
        "regno" : "nmt778",
        "make" : "madz",
        "model" : "delivum",
        "year" : 2010,
        "colour" : "green",
        "enno" : null
}
{
        "_id" : ObjectId("66865e617ea1602d15144510"),
        "regno" : "cct556",
        "make" : "toyota",
        "model" : "hiluxe",
        "year" : 2006,
        "colour" : "blue",
        "enno" : null
}
{
        "_id" : ObjectId("66865e617ea1602d15144511"),
        "regno" : "fgf223",
        "make" : "metumbish",
        "model" : "megna",
        "year" : 2007,
        "colour" : "purple",
        "enno" : null
}
> db.VehicleDetails.aggregate({$match:{year:2009}},{$group:{_id:null,totalno:{$sum:1}}});
{ "_id" : null, "totalno" : 1 }
> db.VehicleDetails.deleteOne({regno:"fgf223"});
{ "acknowledged" : true, "deletedCount" : 1 }
> db.createUser({user:"Ram",pwd:"123ram",roles:[{role:"read",db:Vehicle"}]});
2024-07-04T14:24:52.834+0530 E QUERY    [thread1] SyntaxError: unterminated string literal @(shell):1:69

> db.createUser({user:"Ram",pwd:"password",roles:[
... {role:"read",db:"VehicleDetails"}]}];
2024-07-04T14:26:50.452+0530 E QUERY    [thread1] SyntaxError: missing ) after argument list @(shell):2:35

> db.createUser({user:"Ram",pwd:"pasw23",roles:[{ role:"read",db:"VehicleDetails"}]});
Successfully added user: {
        "user" : "Ram",
        "roles" : [
                {
                        "role" : "read",
                        "db" : "VehicleDetails"
                }
        ]
}
> use Book;
switched to db Book
> db.createCollection("BookDetails");
{ "ok" : 1 }
> db.BookDetails.insertMany([
... {
... no:1,title:"data structure",author:"lipstre",sub:"DS",pub:"mesche",qty:4,price:217},
... no:2,title:"DOS circle",author:"nortron",sub:"OS",pub:"PHI",qty:5,price:175},
2024-07-04T14:33:40.335+0530 E QUERY    [thread1] SyntaxError: missing ] after element list @(shell):4:2

> db.BookDetails.insertMany([ { no:1,title:"data structure",author:"lipstre",sub:"DS",pub:"mesche",qty:4,price:217},{ no:2,title:"DOS circle",author:"nortron",sub:"OS",pub:"PHI",qty:5,price:175},{no:3,title:"turbo c++",author:"robert",sub:"Prog",pub:"galgorta",qty:7,price:730}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("668665caffedf60e44fdc97a"),
                ObjectId("668665caffedf60e44fdc97b"),
                ObjectId("668665caffedf60e44fdc97c")
        ]
}
> db.BookDetails.insertMany([ { no:4,title:"installation in linux",author:"divyas",sub:"linux",pub:"ptui",qty:4,price:287},{ no:5,title:"DS Algorithms",author:"nick",sub:"algorith,",pub:"PHo",qty:3,price:170},{no:6,title:"java",author:"swizz",sub:"Programming",pub:"gast",qty:9,price:630}]);
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("6686668bffedf60e44fdc97d"),
                ObjectId("6686668bffedf60e44fdc97e"),
                ObjectId("6686668bffedf60e44fdc97f")
        ]
}
> db.BookDetails.find().pretty();
{
        "_id" : ObjectId("668665caffedf60e44fdc97a"),
        "no" : 1,
        "title" : "data structure",
        "author" : "lipstre",
        "sub" : "DS",
        "pub" : "mesche",
        "qty" : 4,
        "price" : 217
}
{
        "_id" : ObjectId("668665caffedf60e44fdc97b"),
        "no" : 2,
        "title" : "DOS circle",
        "author" : "nortron",
        "sub" : "OS",
        "pub" : "PHI",
        "qty" : 5,
        "price" : 175
}
{
        "_id" : ObjectId("668665caffedf60e44fdc97c"),
        "no" : 3,
        "title" : "turbo c++",
        "author" : "robert",
        "sub" : "Prog",
        "pub" : "galgorta",
        "qty" : 7,
        "price" : 730
}
{
        "_id" : ObjectId("6686668bffedf60e44fdc97d"),
        "no" : 4,
        "title" : "installation in linux",
        "author" : "divyas",
        "sub" : "linux",
        "pub" : "ptui",
        "qty" : 4,
        "price" : 287
}
{
        "_id" : ObjectId("6686668bffedf60e44fdc97e"),
        "no" : 5,
        "title" : "DS Algorithms",
        "author" : "nick",
        "sub" : "algorith,",
        "pub" : "PHo",
        "qty" : 3,
        "price" : 170
}
{
        "_id" : ObjectId("6686668bffedf60e44fdc97f"),
        "no" : 6,
        "title" : "java",
        "author" : "swizz",
        "sub" : "Programming",
        "pub" : "gast",
        "qty" : 9,
        "price" : 630
}
> db.BookDetails.updateOne({no:2},{$set:{author:"david"}});
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.BookDetails.aggregate({$match:{qty}},{$group:{_id:null,totalno:{$sum:1}}});
2024-07-04T14:41:16.088+0530 E QUERY    [thread1] ReferenceError: qty is not defined :
@(shell):1:35

> db.BookDetails.aggregate({$group:{_id:null,totalqty:{$sum:"$qty"}}});
{ "_id" : null, "totalqty" : 32 }
> db.BookDetails.deleteOne({no:4});
{ "acknowledged" : true, "deletedCount" : 1 }
> db.createUser({user:"Ram",pwd:"ram123",roles:[{role:"read",db:"Book"}]});
Successfully added user: {
        "user" : "Ram",
        "roles" : [
                {
                        "role" : "read",
                        "db" : "Book"
                }
        ]
}